<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="682c6b14-9a3a-45d8-8613-d66f31b072a9" activeEnvironment="Default" name="Zycus Assignment" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="dbeeb5b4-96f7-4e89-af0c-459cc86ca53c" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://Krishnas-MacBook-Pro.local:8089/</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="assignment" path="/assignment" id="ba5443c8-a2fa-4826-98f1-ceb06d759fde"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="/customers/{id}" path="/customers/{id}" id="d11399f6-6912-4049-8641-6a8252eaeb7a"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="GET" id="5204c301-2a91-4d8e-8eef-2b1f63a5be64" method="GET"><con:settings/><con:parameters/><con:request name="customers_GET" id="5d027915-af15-4d13-b90b-ef5fad42fb64" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/customers" path="customers" id="5efdff08-2446-4d69-b0e2-f9ff688d047e"><con:settings/><con:parameters/><con:method name="POST" id="2904f46c-b754-40ee-8a8e-6e60b449f06e" method="POST"><con:settings/><con:parameters/><con:request name="customers_POST" id="62018ce7-b3a2-4d81-9bb0-4be6bfe81b02" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:resource></con:interface><con:testSuite id="5325c4af-023d-4b0a-8b1f-3e1e12468f79" name="assignment TestSuite"><con:description>TestSuite generated for REST Service [http://localhost:8080]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e01597f0-e63a-4af7-b4eb-bf877528c2cf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/customers/{id} TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [/customers/{id}] located at [/assignment/customers/{id}]</con:description><con:settings/><con:testStep type="restrequest" name="customers_GET" id="e577a339-7017-4c51-9051-cb8e0a1276b8"><con:settings/><con:config service="http://localhost:8080" resourcePath="/assignment/customers/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="customers_GET" id="5d027915-af15-4d13-b90b-ef5fad42fb64" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8cfa83a4-5946-4235-9cc9-9706324ec1dd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/customers TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [/customers] located at [/assignment/customers]</con:description><con:settings/><con:testStep type="restrequest" name="customers_POST" id="ad82a726-6da3-424a-993c-57d2f4734ad8"><con:settings/><con:config service="http://localhost:8080" resourcePath="/assignment/customers" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="customers_POST" id="62018ce7-b3a2-4d81-9bb0-4be6bfe81b02" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="7b678544-2eb3-416b-b585-a05f7cef2dc1" port="8089" path="/" host="Krishnas-MacBook-Pro.local" name="Customers MockService 1"><con:settings/><con:properties/><con:restMockAction name="/assignment/customers/id" method="GET" resourcePath="/assignment/customers/id" id="ea6c4ff1-a55b-446c-9697-0c224bef3f00"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Return Customer" id="fd8dc254-7acd-454a-a651-80803b85fcd3" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/assignment/customers" method="POST" resourcePath="/assignment/customers" id="b40ecc3a-a7a7-415c-9b07-a13dc874da4b"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Create Customer - Success" id="6172ec00-8b20-4e34-95ab-7ea76cef0e96" httpResponseStatus="200"><con:settings/></con:response><con:response name="Create Customer - Existing User" id="2b20c230-e867-4b6f-97af-27304af92df6" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response><con:response name="Create Customer - Server Error" id="73f75908-2ed1-4b91-94f5-644c868a2a10" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>